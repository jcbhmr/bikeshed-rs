name: gh release create
on:
  workflow_dispatch:
    inputs:
      draft:
        description: ""
        type: boolean
        default: false
concurrency: ${{ github.workflow }}-${{ github.ref }}
jobs:
  cargo-build:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Use older Ubuntu distro to force older glibc
          - os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: arm64-apple-darwin
          - os: macos-13
            target: x86_64-apple-darwin
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - run: rustup toolchain install nightly --profile minimal
      - run: cargo build --target "$TARGET" --release --locked
        env:
          TARGET: ${{ matrix.target }}
      - uses: actions/upload-artifact@v4
        with:
          name: bikeshed-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/bikeshed
  get-version:
    outputs:
      version: ${{ steps.yq.outputs.result }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - id: yq
        uses: mikefarah/yq@master
        with:
          cmd: yq .package.version Cargo.toml
  gh-release-create:
    needs: [poe-build, get-version]
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
      - shell: bash -ex {0}
        run: |
          for f in *; do
            if [[ $f == *windows* ]]; then
              wd="$PWD"
              (cd "$f" && zip -r "$wd/$f.zip" .)
            else
              wd="$PWD"
              (cd "$f" && tar -czf "$wd/$f.tar.gz" .)
            fi
          done
      - run: |
          gh release create \
            "v$VERSION" \
            $DRAFT_FLAG \
            --generate-notes \
            *.tar.gz *.zip
        env:
          GH_TOKEN: ${{ github.token }}
          GH_REPO: ${{ github.repository }}
          VERSION: ${{ needs.get-version.outputs.version }}
          DRAFT_FLAG: ${{ (inputs.draft && '--draft') || '' }}